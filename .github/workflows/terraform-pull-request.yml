name: Validate terraform 

on:
  workflow_dispatch:
  pull_request:
    paths:
      - 'terraform/**'
      - '!**/*.md'

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  prepare:
    concurrency:
      group: storage 
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure Azure credentials
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZ_CREDS }}

      - name: Setup Ansible
        run: >
          pipx uninstall ansible-core &&
          pip3 install ansible &&
          ansible-galaxy collection install azure.azcollection --force

      - name: Install dependecies 
        run: 
          pip3 install -r ~/.ansible/collections/ansible_collections/azure/azcollection/requirements.txt

      - name: Setup Azure Storage for Terraform Backend
        run:
          ansible-playbook -v pull-request-playbook.yml
        env:
          RESOURCE_GROUP: ${{ secrets.AZ_RESOURCE_GROUP }}
          STORAGE_ACCOUNT_NAME: ${{ secrets.AZ_STORAGE_ACCOUNT_NAME }}
          CONTAINER_NAME: ${{ secrets.AZ_CONTAINER_NAME }}

  validate:
    env:
      tf_actions_working_dir: terraform 
    defaults:
      run:
        working-directory: ./terraform
    concurrency:
      group: terraform 
      cancel-in-progress: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure Azure credentials
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZ_CREDS }}
      
      - name: Configure Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.5

      - name: Terraform fmt
        id: fmt
        run: |
          terraform fmt -check
        continue-on-error: true

      - name: Generate backend configuration
        run: |
          echo "resource_group_name = \"$RESOURCE_GROUP\"" >> backend.hcl
          echo "storage_account_name = \"$STORAGE_ACCOUNT_NAME\"" >> backend.hcl
          echo "container_name = \"$CONTAINER_NAME\"" >> backend.hcl
        env:
          RESOURCE_GROUP: ${{ secrets.AZ_RESOURCE_GROUP }}
          STORAGE_ACCOUNT_NAME: ${{ secrets.AZ_STORAGE_ACCOUNT_NAME }}
          CONTAINER_NAME: ${{ secrets.AZ_CONTAINER_NAME }}

      - name: Terraform Init
        id: init
        run: |
          terraform init -backend-config=backend.hcl -lock-timeout=120s

      - name: Terraform Validate
        id: validate
        run: |
          terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color -lock-timeout=120s
        continue-on-error: true
  
      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
