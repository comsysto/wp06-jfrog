---
- name: Check if Root CA key exists locally
  stat:
    path: "{{ root_ca_key }}"
  register: root_ca_key_file

- name: Check if Root CA certificate exists locally
  stat:
    path: "{{ root_ca_cert }}"
  register: root_ca_cert_file

- name: Retrieve Root CA key and certificate from Kubernetes
  block:
    - name: Retrieve Root CA secret from Kubernetes
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ ca_secret_name }}"
        namespace: "{{ ca_namespace }}"
      register: ca_secret_info

    - name: Decode and write Root CA key to file
      copy:
        content: "{{ ca_secret_info.resources[0].data['rootCA.key'] | b64decode }}"
        dest: "{{ root_ca_key }}"
        mode: '0600'
      when: not root_ca_key_file.stat.exists

    - name: Decode and write Root CA certificate to file
      copy:
        content: "{{ ca_secret_info.resources[0].data['rootCA.crt'] | b64decode }}"
        dest: "{{ root_ca_cert }}"
      when: not root_ca_cert_file.stat.exists
  when: not (root_ca_key_file.stat.exists and root_ca_cert_file.stat.exists)

- name: Fail if Root CA key or certificate is not found
  fail:
    msg: "Root CA key or certificate not found locally or in Kubernetes secrets."
  when: not (root_ca_key_file.stat.exists and root_ca_cert_file.stat.exists)

- name: Check if Client certificate exists
  stat:
    path: "{{ client_cert_crt }}"
  register: client_cert_file

- name: Generate Client Key
  command: openssl genrsa -out {{ client_cert_key }} 2048
  args:
    creates: "{{ client_cert_key }}"
  when: not client_cert_file.stat.exists

- name: Generate Client CSR
  command: >
    openssl req -new -key {{ client_cert_key }} -out client.csr
    -subj "/CN=ArtifactoryClient"
  args:
    creates: "client.csr"
  when: not client_cert_file.stat.exists

- name: Generate Client Certificate
  command: >
    openssl x509 -req -in client.csr -CA {{ root_ca_cert }}
    -CAkey {{ root_ca_key }} -CAcreateserial -out {{ client_cert_crt }}
    -days 500 -sha256
  args:
    creates: "{{ client_cert_crt }}"
  when: not client_cert_file.stat.exists

- name: Set permissions on Client key
  file:
    path: "{{ client_cert_key }}"
    mode: '0600'

- name: Loop over Artifactory instances
  include_tasks: server_certificates.yml
  loop: "{{ artifactory_instances }}"
  loop_control:
    loop_var: artifactory_instance
