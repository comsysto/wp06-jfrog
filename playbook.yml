---
- name: Deploy multiple NGINX ingress controllers
  hosts: localhost
  roles:
    - role: nginx_ingress
      vars:
        namespace: ingress-nginx-1
        release_name: ingress-nginx-1
        ingress_class_name: nginx-1

    - role: nginx_ingress
      vars:
        namespace: ingress-nginx-2
        release_name: ingress-nginx-2
        ingress_class_name: nginx-2

- name: Deploy Artifactory Instances with mTLS using Existing Nginx Controllers
  hosts: localhost
  connection: local
  vars:
    artifactory_instances:
      - name: artifactory1
        namespace: artifactory-instance1
        host: artifactory1.example.com
        ingress_class: nginx-1
        ingress_namespace: ingress-nginx-1
      - name: artifactory2
        namespace: artifactory-instance2
        host: artifactory2.example.com
        ingress_class: nginx-2
        ingress_namespace: ingress-nginx-2
    root_ca:
      key: rootCA.key
      cert: rootCA.crt
    client_cert:
      key: client.key
      cert: client.crt
    root_ca_exists: false
    server_cert_exists: {}
  tasks:

    - name: Create Namespaces for Artifactory Instances
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ item.namespace }}"
      loop: "{{ artifactory_instances }}"
      loop_control:
        label: "{{ item.namespace }}"

    - name: Add JFrog Helm Repository
      community.general.helm_repository:
        name: jfrog
        repo_url: https://charts.jfrog.io
        state: present

    - name: Update Helm Repositories
      command: helm repo update

    - name: Check if Root CA secret exists
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        namespace: "{{ artifactory_instances[0].namespace }}"
        name: root-ca-secret
      register: root_ca_secret
      failed_when: false

    - name: Set root_ca_exists fact
      set_fact:
        root_ca_exists: "{{ root_ca_secret.resources | length > 0 }}"

    - name: Check if TLS secrets exist for Artifactory instances
      block:
        - name: Check if TLS secret exists
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Secret
            namespace: "{{ item.namespace }}"
            name: "{{ item.name }}-tls-secret"
          register: tls_secret
          failed_when: false

        - name: Set server_cert_exists fact
          set_fact:
            server_cert_exists: "{{ server_cert_exists | default({}) | combine({ item.name: (tls_secret.resources | length > 0) }) }}"
      loop: "{{ artifactory_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Generate Root CA Key
      ansible.builtin.command: >
        openssl genrsa -out {{ root_ca.key }} 2048
      args:
        creates: "{{ root_ca.key }}"
      when: not root_ca_exists

    - name: Generate Root CA Certificate
      ansible.builtin.command: >
        openssl req -x509 -new -nodes -key {{ root_ca.key }}
        -sha256 -days 1024 -out {{ root_ca.cert }}
        -subj "/CN=MyRootCA"
      args:
        creates: "{{ root_ca.cert }}"
      when: not root_ca_exists

    - name: Generate Server Certificates for Artifactory Instances
      block:
        - name: Generate Server Key
          ansible.builtin.command: >
            openssl genrsa -out {{ item.name }}.key 2048
          args:
            creates: "{{ item.name }}.key"
          when: not server_cert_exists[item.name]

        - name: Generate CSR
          ansible.builtin.command: >
            openssl req -new -key {{ item.name }}.key -out {{ item.name }}.csr
            -subj "/CN={{ item.host }}"
          args:
            creates: "{{ item.name }}.csr"
          when: not server_cert_exists[item.name]

        - name: Generate Server Certificate
          ansible.builtin.command: >
            openssl x509 -req -in {{ item.name }}.csr -CA {{ root_ca.cert }}
            -CAkey {{ root_ca.key }} -CAcreateserial -out {{ item.name }}.crt
            -days 500 -sha256
          args:
            creates: "{{ item.name }}.crt"
          when: not server_cert_exists[item.name]
      loop: "{{ artifactory_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Generate Client Key
      ansible.builtin.command: >
        openssl genrsa -out {{ client_cert.key }} 2048
      args:
        creates: "{{ client_cert.key }}"

    - name: Generate Client CSR
      ansible.builtin.command: >
        openssl req -new -key {{ client_cert.key }} -out client.csr
        -subj "/CN=ArtifactoryClient"
      args:
        creates: client.csr

    - name: Generate Client Certificate
      ansible.builtin.command: >
        openssl x509 -req -in client.csr -CA {{ root_ca.cert }}
        -CAkey {{ root_ca.key }} -CAcreateserial -out {{ client_cert.cert }}
        -days 500 -sha256
      args:
        creates: "{{ client_cert.cert }}"

    - name: Create Root CA Secret
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: root-ca-secret
            namespace: "{{ item.namespace }}"
          data:
            ca.crt: "{{ lookup('file', root_ca.cert) | b64encode }}"
      when: not root_ca_exists
      loop: "{{ artifactory_instances }}"
      loop_control:
        label: "{{ item.namespace }}"

    - name: Create TLS Secrets for Artifactory Instances
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Secret
          metadata:
            name: "{{ item.name }}-tls-secret"
            namespace: "{{ item.namespace }}"
          type: kubernetes.io/tls
          data:
            tls.crt: "{{ lookup('file', item.name + '.crt') | b64encode }}"
            tls.key: "{{ lookup('file', item.name + '.key') | b64encode }}"
      when: not server_cert_exists[item.name]
      loop: "{{ artifactory_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create Artifactory Internal Service (ClusterIP)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: "{{ item.name }}-service"
            namespace: "{{ item.namespace }}"
            labels:
              app: "{{ item.name }}"
          spec:
            selector:
              app: "{{ item.name }}"
            ports:
              - protocol: TCP
                port: 8081
                targetPort: 8081
      loop: "{{ artifactory_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create Custom Values Files for Artifactory Deployment
      ansible.builtin.copy:
        dest: "{{ item.name }}-values.yaml"
        content: |
          replicaCount: 1
          service:
            type: ClusterIP
            port: 8081
          ingress:
            enabled: false
          artifactory:
            resources: {}
            livenessProbe:
              enabled: false
            readinessProbe:
              enabled: false
          nginx:
            enabled: false
      loop: "{{ artifactory_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Deploy Artifactory Instances with Helm
      community.kubernetes.helm:
        name: "{{ item.name }}"
        chart_ref: jfrog/artifactory-oss
        release_namespace: "{{ item.namespace }}"
        values_file: "{{ item.name }}-values.yaml"
        create_namespace: false
      loop: "{{ artifactory_instances }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Create Ingress Resources for Artifactory Instances
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: "{{ item.name }}-ingress"
            namespace: "{{ item.namespace }}"
            annotations:
              kubernetes.io/ingress.class: "{{ item.ingress_class }}"
              nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
              nginx.ingress.kubernetes.io/auth-tls-secret: "{{ item.namespace }}/root-ca-secret"
              nginx.ingress.kubernetes.io/auth-tls-verify-depth: "1"
              nginx.ingress.kubernetes.io/ssl-redirect: "true"
          spec:
            tls:
              - hosts:
                  - "{{ item.host }}"
                secretName: "{{ item.name }}-tls-secret"
            rules:
              - host: "{{ item.host }}"
                http:
                  paths:
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: "{{ item.name }}-service"
                          port:
                            number: 8081
      loop: "{{ artifactory_instances }}"
      loop_control:
        label: "{{ item.name }}"
